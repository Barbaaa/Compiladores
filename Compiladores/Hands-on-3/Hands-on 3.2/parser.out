Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> input
Rule 1     input -> logical_expr
Rule 2     input -> empty
Rule 3     logical_expr -> logical_expr AND logical_term
Rule 4     logical_expr -> logical_expr OR logical_term
Rule 5     logical_expr -> logical_term
Rule 6     logical_term -> NOT logical_factor
Rule 7     logical_term -> logical_factor
Rule 8     logical_factor -> LPAREN logical_expr RPAREN
Rule 9     logical_factor -> BOOLEAN
Rule 10    empty -> <empty>

Terminals, with rules where they appear

AND                  : 3
BOOLEAN              : 9
LPAREN               : 8
NOT                  : 6
OR                   : 4
RPAREN               : 8
error                : 

Nonterminals, with rules where they appear

empty                : 2
input                : 0
logical_expr         : 1 3 4 8
logical_factor       : 6 7
logical_term         : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . input
    (1) input -> . logical_expr
    (2) input -> . empty
    (3) logical_expr -> . logical_expr AND logical_term
    (4) logical_expr -> . logical_expr OR logical_term
    (5) logical_expr -> . logical_term
    (10) empty -> .
    (6) logical_term -> . NOT logical_factor
    (7) logical_term -> . logical_factor
    (8) logical_factor -> . LPAREN logical_expr RPAREN
    (9) logical_factor -> . BOOLEAN

    $end            reduce using rule 10 (empty -> .)
    NOT             shift and go to state 5
    LPAREN          shift and go to state 7
    BOOLEAN         shift and go to state 8

    input                          shift and go to state 1
    logical_expr                   shift and go to state 2
    empty                          shift and go to state 3
    logical_term                   shift and go to state 4
    logical_factor                 shift and go to state 6

state 1

    (0) S' -> input .



state 2

    (1) input -> logical_expr .
    (3) logical_expr -> logical_expr . AND logical_term
    (4) logical_expr -> logical_expr . OR logical_term

    $end            reduce using rule 1 (input -> logical_expr .)
    AND             shift and go to state 9
    OR              shift and go to state 10


state 3

    (2) input -> empty .

    $end            reduce using rule 2 (input -> empty .)


state 4

    (5) logical_expr -> logical_term .

    AND             reduce using rule 5 (logical_expr -> logical_term .)
    OR              reduce using rule 5 (logical_expr -> logical_term .)
    $end            reduce using rule 5 (logical_expr -> logical_term .)
    RPAREN          reduce using rule 5 (logical_expr -> logical_term .)


state 5

    (6) logical_term -> NOT . logical_factor
    (8) logical_factor -> . LPAREN logical_expr RPAREN
    (9) logical_factor -> . BOOLEAN

    LPAREN          shift and go to state 7
    BOOLEAN         shift and go to state 8

    logical_factor                 shift and go to state 11

state 6

    (7) logical_term -> logical_factor .

    AND             reduce using rule 7 (logical_term -> logical_factor .)
    OR              reduce using rule 7 (logical_term -> logical_factor .)
    $end            reduce using rule 7 (logical_term -> logical_factor .)
    RPAREN          reduce using rule 7 (logical_term -> logical_factor .)


state 7

    (8) logical_factor -> LPAREN . logical_expr RPAREN
    (3) logical_expr -> . logical_expr AND logical_term
    (4) logical_expr -> . logical_expr OR logical_term
    (5) logical_expr -> . logical_term
    (6) logical_term -> . NOT logical_factor
    (7) logical_term -> . logical_factor
    (8) logical_factor -> . LPAREN logical_expr RPAREN
    (9) logical_factor -> . BOOLEAN

    NOT             shift and go to state 5
    LPAREN          shift and go to state 7
    BOOLEAN         shift and go to state 8

    logical_expr                   shift and go to state 12
    logical_term                   shift and go to state 4
    logical_factor                 shift and go to state 6

state 8

    (9) logical_factor -> BOOLEAN .

    AND             reduce using rule 9 (logical_factor -> BOOLEAN .)
    OR              reduce using rule 9 (logical_factor -> BOOLEAN .)
    $end            reduce using rule 9 (logical_factor -> BOOLEAN .)
    RPAREN          reduce using rule 9 (logical_factor -> BOOLEAN .)


state 9

    (3) logical_expr -> logical_expr AND . logical_term
    (6) logical_term -> . NOT logical_factor
    (7) logical_term -> . logical_factor
    (8) logical_factor -> . LPAREN logical_expr RPAREN
    (9) logical_factor -> . BOOLEAN

    NOT             shift and go to state 5
    LPAREN          shift and go to state 7
    BOOLEAN         shift and go to state 8

    logical_term                   shift and go to state 13
    logical_factor                 shift and go to state 6

state 10

    (4) logical_expr -> logical_expr OR . logical_term
    (6) logical_term -> . NOT logical_factor
    (7) logical_term -> . logical_factor
    (8) logical_factor -> . LPAREN logical_expr RPAREN
    (9) logical_factor -> . BOOLEAN

    NOT             shift and go to state 5
    LPAREN          shift and go to state 7
    BOOLEAN         shift and go to state 8

    logical_term                   shift and go to state 14
    logical_factor                 shift and go to state 6

state 11

    (6) logical_term -> NOT logical_factor .

    AND             reduce using rule 6 (logical_term -> NOT logical_factor .)
    OR              reduce using rule 6 (logical_term -> NOT logical_factor .)
    $end            reduce using rule 6 (logical_term -> NOT logical_factor .)
    RPAREN          reduce using rule 6 (logical_term -> NOT logical_factor .)


state 12

    (8) logical_factor -> LPAREN logical_expr . RPAREN
    (3) logical_expr -> logical_expr . AND logical_term
    (4) logical_expr -> logical_expr . OR logical_term

    RPAREN          shift and go to state 15
    AND             shift and go to state 9
    OR              shift and go to state 10


state 13

    (3) logical_expr -> logical_expr AND logical_term .

    AND             reduce using rule 3 (logical_expr -> logical_expr AND logical_term .)
    OR              reduce using rule 3 (logical_expr -> logical_expr AND logical_term .)
    $end            reduce using rule 3 (logical_expr -> logical_expr AND logical_term .)
    RPAREN          reduce using rule 3 (logical_expr -> logical_expr AND logical_term .)


state 14

    (4) logical_expr -> logical_expr OR logical_term .

    AND             reduce using rule 4 (logical_expr -> logical_expr OR logical_term .)
    OR              reduce using rule 4 (logical_expr -> logical_expr OR logical_term .)
    $end            reduce using rule 4 (logical_expr -> logical_expr OR logical_term .)
    RPAREN          reduce using rule 4 (logical_expr -> logical_expr OR logical_term .)


state 15

    (8) logical_factor -> LPAREN logical_expr RPAREN .

    AND             reduce using rule 8 (logical_factor -> LPAREN logical_expr RPAREN .)
    OR              reduce using rule 8 (logical_factor -> LPAREN logical_expr RPAREN .)
    $end            reduce using rule 8 (logical_factor -> LPAREN logical_expr RPAREN .)
    RPAREN          reduce using rule 8 (logical_factor -> LPAREN logical_expr RPAREN .)

