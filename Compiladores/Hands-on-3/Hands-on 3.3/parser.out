Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> expression AND term
Rule 4     expression -> expression OR term
Rule 5     expression -> term
Rule 6     term -> term TIMES factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> NOT factor
Rule 9     term -> factor
Rule 10    factor -> NUMBER
Rule 11    factor -> BOOLEAN
Rule 12    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 3
BOOLEAN              : 11
DIVIDE               : 7
LPAREN               : 12
MINUS                : 2
NOT                  : 8
NUMBER               : 10
OR                   : 4
PLUS                 : 1
RPAREN               : 12
TIMES                : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 12 0
factor               : 6 7 8 9
term                 : 1 2 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . expression AND term
    (4) expression -> . expression OR term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (3) expression -> expression . AND term
    (4) expression -> expression . OR term

    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    AND             shift and go to state 10
    OR              shift and go to state 11


state 2

    (5) expression -> term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    AND             reduce using rule 5 (expression -> term .)
    OR              reduce using rule 5 (expression -> term .)
    $end            reduce using rule 5 (expression -> term .)
    RPAREN          reduce using rule 5 (expression -> term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 3

    (9) term -> factor .

    TIMES           reduce using rule 9 (term -> factor .)
    DIVIDE          reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)
    AND             reduce using rule 9 (term -> factor .)
    OR              reduce using rule 9 (term -> factor .)
    $end            reduce using rule 9 (term -> factor .)
    RPAREN          reduce using rule 9 (term -> factor .)


state 4

    (8) term -> NOT . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    factor                         shift and go to state 14

state 5

    (10) factor -> NUMBER .

    TIMES           reduce using rule 10 (factor -> NUMBER .)
    DIVIDE          reduce using rule 10 (factor -> NUMBER .)
    PLUS            reduce using rule 10 (factor -> NUMBER .)
    MINUS           reduce using rule 10 (factor -> NUMBER .)
    AND             reduce using rule 10 (factor -> NUMBER .)
    OR              reduce using rule 10 (factor -> NUMBER .)
    $end            reduce using rule 10 (factor -> NUMBER .)
    RPAREN          reduce using rule 10 (factor -> NUMBER .)


state 6

    (11) factor -> BOOLEAN .

    TIMES           reduce using rule 11 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 11 (factor -> BOOLEAN .)
    PLUS            reduce using rule 11 (factor -> BOOLEAN .)
    MINUS           reduce using rule 11 (factor -> BOOLEAN .)
    AND             reduce using rule 11 (factor -> BOOLEAN .)
    OR              reduce using rule 11 (factor -> BOOLEAN .)
    $end            reduce using rule 11 (factor -> BOOLEAN .)
    RPAREN          reduce using rule 11 (factor -> BOOLEAN .)


state 7

    (12) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . expression AND term
    (4) expression -> . expression OR term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    expression                     shift and go to state 15
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 8

    (1) expression -> expression PLUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 16
    factor                         shift and go to state 3

state 9

    (2) expression -> expression MINUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 17
    factor                         shift and go to state 3

state 10

    (3) expression -> expression AND . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 18
    factor                         shift and go to state 3

state 11

    (4) expression -> expression OR . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . NOT factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    term                           shift and go to state 19
    factor                         shift and go to state 3

state 12

    (6) term -> term TIMES . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    factor                         shift and go to state 20

state 13

    (7) term -> term DIVIDE . factor
    (10) factor -> . NUMBER
    (11) factor -> . BOOLEAN
    (12) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6
    LPAREN          shift and go to state 7

    factor                         shift and go to state 21

state 14

    (8) term -> NOT factor .

    TIMES           reduce using rule 8 (term -> NOT factor .)
    DIVIDE          reduce using rule 8 (term -> NOT factor .)
    PLUS            reduce using rule 8 (term -> NOT factor .)
    MINUS           reduce using rule 8 (term -> NOT factor .)
    AND             reduce using rule 8 (term -> NOT factor .)
    OR              reduce using rule 8 (term -> NOT factor .)
    $end            reduce using rule 8 (term -> NOT factor .)
    RPAREN          reduce using rule 8 (term -> NOT factor .)


state 15

    (12) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (3) expression -> expression . AND term
    (4) expression -> expression . OR term

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    AND             shift and go to state 10
    OR              shift and go to state 11


state 16

    (1) expression -> expression PLUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    AND             reduce using rule 1 (expression -> expression PLUS term .)
    OR              reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 17

    (2) expression -> expression MINUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    AND             reduce using rule 2 (expression -> expression MINUS term .)
    OR              reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 18

    (3) expression -> expression AND term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> expression AND term .)
    MINUS           reduce using rule 3 (expression -> expression AND term .)
    AND             reduce using rule 3 (expression -> expression AND term .)
    OR              reduce using rule 3 (expression -> expression AND term .)
    $end            reduce using rule 3 (expression -> expression AND term .)
    RPAREN          reduce using rule 3 (expression -> expression AND term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 19

    (4) expression -> expression OR term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> expression OR term .)
    MINUS           reduce using rule 4 (expression -> expression OR term .)
    AND             reduce using rule 4 (expression -> expression OR term .)
    OR              reduce using rule 4 (expression -> expression OR term .)
    $end            reduce using rule 4 (expression -> expression OR term .)
    RPAREN          reduce using rule 4 (expression -> expression OR term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 20

    (6) term -> term TIMES factor .

    TIMES           reduce using rule 6 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 6 (term -> term TIMES factor .)
    PLUS            reduce using rule 6 (term -> term TIMES factor .)
    MINUS           reduce using rule 6 (term -> term TIMES factor .)
    AND             reduce using rule 6 (term -> term TIMES factor .)
    OR              reduce using rule 6 (term -> term TIMES factor .)
    $end            reduce using rule 6 (term -> term TIMES factor .)
    RPAREN          reduce using rule 6 (term -> term TIMES factor .)


state 21

    (7) term -> term DIVIDE factor .

    TIMES           reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)
    AND             reduce using rule 7 (term -> term DIVIDE factor .)
    OR              reduce using rule 7 (term -> term DIVIDE factor .)
    $end            reduce using rule 7 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 7 (term -> term DIVIDE factor .)


state 22

    (12) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 12 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (factor -> LPAREN expression RPAREN .)

